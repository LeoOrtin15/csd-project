# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: CI/CD MAUI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  
  setup:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    - name: Install .NET MAUI workloads
      run: dotnet workload install maui
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/RoadTripPlannerApp.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

  build:
    name: Build MAUI for Android and IOS
    needs: [setup]
    runs-on: windows-latest
    strategy:
      matrix:
        dotnet-version: ['8.0.x']
        target-framework: [net8.0-android, net8.0-ios]
    steps:
    - name: Checkout code  
      uses: actions/checkout@v4
    - name: Restore dependencies
      run: dotnet restore RoadTripPlannerApp/RoadTripPlannerApp.csproj
    - name: Build
      run: dotnet build RoadTripPlannerApp/RoadTripPlannerApp.csproj --no-restore -f ${{ matrix.target-framework }}
    - name: Save build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.target-framework }}
        path: public

  test:
    needs: [build]
    runs-on: windows-latest
    steps:
    - name: Checkout code  
      uses: actions/checkout@v4
    - name: Restore dependencies
      run: dotnet restore RoadTripPlannerAppTest/RoadTripPlannerAppTest.csproj 
    - name: Test
      run: dotnet test
      working-directory: ./RoadTripPlannerAppTest
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: ./RoadTripPlannerAppTest/TestResults

  analysis:
    needs: [build]
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp' ]
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
    - name: Checkout code  
      uses: actions/checkout@v4 
      # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  deployDev:
    name: Deploy to Development
    # Job runs only if the event is a pull request
    if: github.event_name == 'pull_request'
    # The job needs the test job to pass first
    needs: [ test ]
    runs-on: ubuntu-latest
    # Define some environment variables
    environment: 
      # The environment name must match the envrionment name in the repository
      name: Development
    steps:
      - name: Deploy
        run: echo Deploying to development
  
  # Our deployment to staging environment
  deployStaging:
    name: Deploy to Staging
    # deploy to staging only if we are committing to main
    if: github.event.ref == 'refs/heads/main'
    needs: [ test, analysis ]
    runs-on: ubuntu-latest
    environment:
      name: Staging
    steps:
    - name: Deploy
      run: echo Deploying to staging http://test.myapp.com
  
  # Deploy to production environment
  deployProduction:
    name: Deploy to Production
    needs: [ deployStaging ]
    runs-on: ubuntu-latest
    environment:
      name: Production
    steps:
      - name: Deploy
        run: echo Deploying to production
